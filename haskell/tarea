sucesor :: Int -> Int
sucesor n = n + 1

predecesor :: Int -> Int
predecesor n = n - 1

add :: Int -> Int -> Int
add a 0 = a
add a b = add (sucesor a) (predecesor b)

mult :: Int -> Int -> Int
mult _ 0 = 0
mult a b = add a (mult a (predecesor b))

resta :: Int -> Int -> Int
resta a 0 = a
resta a b = resta (predecesor a) (predecesor b)

dividir :: Int -> Int -> Int
dividir a b
  | a < b = 0
  | otherwise = sucesor (dividir (resta a b) b)

addReal :: Float -> Float -> Float
addReal x y = x + y

main :: IO ()
main = do
  putStrLn ("Suma 3 + 2 = " ++ show (add 3 2))
  putStrLn ("Multiplicación 3 * 4 = " ++ show (mult 3 4))
  putStrLn ("Resta 7 - 2 = " ++ show (resta 7 2))
  putStrLn ("División 10 / 2 = " ++ show (dividir 10 2))
  putStrLn ("Suma Real 3.5 + 2.7 = " ++ show (addReal 3.5 2.7))
